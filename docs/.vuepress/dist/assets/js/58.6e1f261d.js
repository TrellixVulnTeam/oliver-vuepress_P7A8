(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{554:function(t,s,a){"use strict";a.r(s);var n=a(9),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("类似与 Java语言中的 LinkedList")]),t._v(" "),a("p",[t._v("增加和删除操作非常快 时间复杂度 O(1), 可以提供高效的 "),a("code",[t._v("节点排序能力")]),t._v(" 以及 "),a("code",[t._v("顺序节点访问方式")])])]),t._v(" "),a("p",[t._v("List的底层实现：")]),t._v(" "),a("p",[t._v("Redis 3.2 之前:")]),t._v(" "),a("ul",[a("li",[t._v("双向链表 （adlist）")]),t._v(" "),a("li",[t._v("压缩链表 （ziplist）")])]),t._v(" "),a("p",[t._v("Redis 3.2 之后：")]),t._v(" "),a("ul",[a("li",[t._v("快速链表 （quicklist）")])]),t._v(" "),a("h2",{attrs:{id:"基本结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本结构"}},[t._v("#")]),t._v(" 基本结构")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/middleware/redislearn/Reids链表.png"),alt:"foo"}}),t._v(" "),a("div",{staticClass:"language-C extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("listNode")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前置节点    ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("listNode")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" prev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 后置节点   ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("listNode")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 节点的值    ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" listNode\n")])])]),a("div",{staticClass:"language-C extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("list")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表头节点    ")]),t._v("\n  listNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表尾节点    ")]),t._v("\n  listNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" tail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 链表所包含的节点数量   ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 节点值复制函数   ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dup"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 节点值释放函数   ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("free"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 节点值对比函数   ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" list\n")])])]),a("ul",[a("li",[t._v("dup:复制节点函数")]),t._v(" "),a("li",[t._v("free: 释放节点函数")]),t._v(" "),a("li",[t._v("match: 比较节点函数")])]),t._v(" "),a("h2",{attrs:{id:"特点："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点："}},[t._v("#")]),t._v(" 特点：")]),t._v(" "),a("ul",[a("li",[t._v("双端:  链表节点带有prev和next指针，获取某个节点的前置节点和后置节点的复杂度都是O(1)")]),t._v(" "),a("li",[t._v("无环：表头节点的prev指针和表尾节点的next指针都指向NULL，对链表的访问以NULL为终点")]),t._v(" "),a("li",[t._v("带链表长度计算器：list 存储 链表长度，获取节点数量的复杂度为 O(1)")]),t._v(" "),a("li",[t._v("多态： 使用void*指针来保存节点值， 并且可以通过list结构的dup、free、match三个属性为节点值设置\n类型特定函数，所以链表可以用于保存各种不同类型的值。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);