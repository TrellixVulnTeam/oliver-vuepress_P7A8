{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{518:function(t,s,a){\"use strict\";a.r(s);var n=a(9),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"string\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#string\"}},[t._v(\"#\")]),t._v(\" String\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"创建字符串的方式\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#创建字符串的方式\"}},[t._v(\"#\")]),t._v(\" 创建字符串的方式\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[t._v(\"# \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\"、直接赋值\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" str \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"abc\"')]),t._v(\"\\n \\n# \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),t._v(\"、创建字符串对象  \\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" str \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"abc\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n  \\n\")])])]),a(\"h2\",{attrs:{id:\"字符串的不可变性\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#字符串的不可变性\"}},[t._v(\"#\")]),t._v(\" 字符串的不可变性\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"final\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"implements\")]),t._v(\" java\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"io\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Serializable\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Comparable\")]),a(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"CharSequence\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Stable\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"final\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"byte\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" value\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"通过源码可知：\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"String\")]),t._v(\" 类 被 \"),a(\"code\",[t._v(\"final\")]),t._v(\" 关键字修饰，表示不可继承 \"),a(\"code\",[t._v(\"String\")]),t._v(\" 类\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"String\")]),t._v(\" 类的数据存储于 \"),a(\"code\",[t._v(\"byte[]\")]),t._v(\" 数组，这个数组被 \"),a(\"code\",[t._v(\"final\")]),t._v(\" 关键字修饰，表示 \"),a(\"strong\",[a(\"code\",[t._v(\"String\")]),t._v(\" 对象不可被更改\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"JDK 1.9 之前是使用 char 数组保存， 1.9 之后开始使用 byte 数组保存\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"为什么-java-要这样设计？\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么-java-要这样设计？\"}},[t._v(\"#\")]),t._v(\" 为什么 Java 要这样设计？\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"线程安全\\n\"),a(\"ul\",[a(\"li\",[t._v(\"不可变的对象和值是线程安全的，可以实现多个线程中共享数据\")]),t._v(\" \"),a(\"li\",[t._v(\"由于 String 天然的不可变，当一个线程”修改“了字符串的值，只会产生一个新的字符串对象，不会对其他线程的访问产生副作用，访问的都是同样的字符串数据，不需要任何同步操作\")])])]),t._v(\" \"),a(\"li\",[t._v(\"String 对象安全性，避免String被篡改\\n\"),a(\"ul\",[a(\"li\",[t._v(\"字符串用来创建存储敏感信息，如账号，密码，网络路径，文件处理等场景里，保证字符串 String 类的安全性就尤为重要了\")])])]),t._v(\" \"),a(\"li\",[t._v(\"可以实现字符串常量池\\n\"),a(\"ul\",[a(\"li\",[t._v(\"直接赋值\\n\"),a(\"ul\",[a(\"li\",[t._v(\"通过 \"),a(\"code\",[t._v('String str=\"abc\"')]),t._v(\" 方式创建时，JVM 首先会检测该对象是否在字符串常量池中存在，如果存在，则返回对象引用，否则会在常量池中创建新的字符串，这样做减少了同一个值的字符串对象重复被创建，节约内存\")])])])])]),t._v(\" \"),a(\"li\",[t._v(\"Hashcode 缓存：\\n\"),a(\"ul\",[a(\"li\",[t._v(\"字符串的 \"),a(\"code\",[t._v(\"Hashcode\")]),t._v(\" 属性不变，保证唯一性，使得类似 HashMap，HashSet 等容器才能实现相应的缓存功能，由于 String 的不可变，避免重复计算 \"),a(\"code\",[t._v(\"hashcode\")]),t._v(\"，只有使用缓存的 \"),a(\"code\",[t._v(\"hashcode\")]),t._v(\" 即可，这样一来大大提高了在散列集合中使用 String 对象的性能 (\"),a(\"strong\",[t._v(\"暂时不是很理解\")]),t._v(\")\")])])])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"replacefirst-、replaceall、replace-区别\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#replacefirst-、replaceall、replace-区别\"}},[t._v(\"#\")]),t._v(\" replaceFirst 、replaceAll、replace 区别\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"replaceFirst\\n\"),a(\"ul\",[a(\"li\",[t._v(\"和  \"),a(\"code\",[t._v(\"replaceAll\")]),t._v(\" 使用 正则 进行字符串的替换，区别在 只替换第一个匹配到的项\")])])]),t._v(\" \"),a(\"li\",[t._v(\"replaceAll\\n\"),a(\"ul\",[a(\"li\",[t._v(\"使用 正则 ，进行替换所有的字符串\")])])]),t._v(\" \"),a(\"li\",[t._v(\"replace\\n\"),a(\"ul\",[a(\"li\",[t._v(\"指定字符串，替换所有相对应的字符串\")])])])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"字符串拼接的集中方式和区别\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#字符串拼接的集中方式和区别\"}},[t._v(\"#\")]),t._v(\" 字符串拼接的集中方式和区别\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_1、字符串运算符-拼接\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1、字符串运算符-拼接\"}},[t._v(\"#\")]),t._v(\" 1、字符串运算符 拼接\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[t._v(\"# \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.1\")]),t._v(\" 两个字面量的拼接\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" str \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"a\"')]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"b\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \\n# \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.2\")]),t._v(\" 一个字符串变量 和 字面量 拼接\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" stra \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"stra\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" newStr \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" stra \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"abc\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"1.1:  两个字面量进行拼接时，编译器会进行常量折叠，进行自动拼接，即会变成 \"),a(\"code\",[t._v('String str = \"ab\"')])]),t._v(\" \"),a(\"li\",[t._v(\"1.2:  字符串变量 和 字面量 进行拼接时， 是通过 StringBuilder 的 append() 方法进行字符串追加，最后在 调用 \"),a(\"code\",[t._v(\"toString()\")]),t._v(\" 方法 转为字符串 （底层 就是一个new String()）\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"对一个字符串 大量的拼接，会大大的降低性能\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_2、concat-拼接函数\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2、concat-拼接函数\"}},[t._v(\"#\")]),t._v(\" 2、\"),a(\"strong\",[t._v(\"concat\")]),t._v(\" 拼接函数\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" stra \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"hello tom!\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" strb \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"hello oliver!\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" newStr \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" stra\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"concat\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"stra\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"concat\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"strb\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"创建一个字符串数组，长度是 已有字符串 和 待拼接字符串的长度，\")]),t._v(\" \"),a(\"li\",[t._v(\"会将两个字符串的值，复制到新的字符数组中\")]),t._v(\" \"),a(\"li\",[t._v(\"并使用这个数组 返回一个新的 \"),a(\"code\",[t._v(\"String\")]),t._v(\"  对象\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_3、stringbuilder\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3、stringbuilder\"}},[t._v(\"#\")]),t._v(\" 3、StringBuilder\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"StringBuilder\")]),t._v(\" strBuilder \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"StringBuilder\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"oliver\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nstrBuilder\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"append\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"这是是一次测试！\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"h3\",{attrs:{id:\"_4、stringbuffer\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4、stringbuffer\"}},[t._v(\"#\")]),t._v(\" 4、StringBuffer\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"StringBuffer\")]),t._v(\" strBuffer \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"StringBuffer\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"oliver\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nstrBuffer\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"append\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"这是是一次测试！\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"h2\",{attrs:{id:\"string-stringbuilder-string-buffer-的区别\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#string-stringbuilder-string-buffer-的区别\"}},[t._v(\"#\")]),t._v(\" String \\\\ StringBuilder \\\\ String Buffer 的区别\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"String\\n\"),a(\"ul\",[a(\"li\",[t._v(\"不可变字符序列\")]),t._v(\" \"),a(\"li\",[t._v(\"初始化可以赋 \"),a(\"code\",[t._v(\"null\")])])])]),t._v(\" \"),a(\"li\",[t._v(\"StringBuiler\\n\"),a(\"ul\",[a(\"li\",[t._v(\"可变字符序列\")]),t._v(\" \"),a(\"li\",[t._v(\"线程不安全\")]),t._v(\" \"),a(\"li\",[t._v(\"效率高\")]),t._v(\" \"),a(\"li\",[t._v(\"初始化可以赋 \"),a(\"code\",[t._v(\"null\")]),t._v(\" 会报警，只允许是一个空的对象\")])])]),t._v(\" \"),a(\"li\",[t._v(\"StringBuffer\\n\"),a(\"ul\",[a(\"li\",[t._v(\"可变总府序列\")]),t._v(\" \"),a(\"li\",[t._v(\"线程安全 （使用 \"),a(\"code\",[t._v(\"synchronized\")]),t._v(\" 关键字修饰）\")]),t._v(\" \"),a(\"li\",[t._v(\"效率低\")]),t._v(\" \"),a(\"li\",[t._v(\"初始化可以赋 \"),a(\"code\",[t._v(\"null\")]),t._v(\" 会报警，只允许是一个空的对象\")])])])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"string-对-switch-的支持\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#string-对-switch-的支持\"}},[t._v(\"#\")]),t._v(\" String 对 switch 的支持\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"对字符型-char-类型的支持\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#对字符型-char-类型的支持\"}},[t._v(\"#\")]),t._v(\" 对字符型 char 类型的支持\")]),t._v(\" \"),a(\"p\",[t._v(\"char 类型的字符 反编译后，会变成 十进制的 \"),a(\"code\",[t._v(\"ascii码\")]),t._v(\" , switch 实际还是比较的 Int 类型\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"对-字符串-string-类型的支持\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#对-字符串-string-类型的支持\"}},[t._v(\"#\")]),t._v(\" 对 字符串 String 类型的支持\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" switchDemoString\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"switchDemoString\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" args\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" str \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"world\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" s\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"switch\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"s \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" str\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"hashCode\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"default\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"\\n            \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"break\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"case\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"99162322\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"\\n            \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"s\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"equals\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"hello\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n                \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"hello\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n            \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"break\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"case\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"113318802\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"\\n            \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"s\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"equals\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"world\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n                \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"world\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n            \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"break\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"通过反编译可以了解到  switch 支持 String ，是通过 String 的 \"),a(\"code\",[t._v(\"hashcode\")]),t._v(\"  和 \"),a(\"code\",[t._v(\"equals\")]),t._v(\" 来进行对比的\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[a(\"strong\",[t._v(\"其实switch只支持一种数据类型，那就是整型，其他数据类型都是转换成整型之后再使用switch的\")])])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"string-intern\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#string-intern\"}},[t._v(\"#\")]),t._v(\" String.intern\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"code\",[t._v('\"a\"')]),t._v(\"  字面量会在字符串 存储在字符串常量池里，如果存在，则返回对象引用，否则会在常量池中创建新的字符串，这样做减少了同一个值的字符串对象重复被创建\")]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"new String()\")]),t._v(\"  会在堆中创建对象，并返回堆内存中的地址引用\")]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"intern()\")]),t._v(\" 方法会从字符串常量池中查询当前字符串是否存在，若不存在就会将当前字符串放入常量池中\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"不同版本之间-intern-的区别\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#不同版本之间-intern-的区别\"}},[t._v(\"#\")]),t._v(\" 不同版本之间 intern 的区别\")]),t._v(\" \"),a(\"p\",[t._v(\"JDK6：\")]),t._v(\" \"),a(\"p\",[t._v(\"常量池还是存在于永久代中。\")]),t._v(\" \"),a(\"p\",[t._v(\"也就是说, \"),a(\"strong\",[t._v(\"常量池和堆是两块不同的内存区域。\")]),t._v(\"\\t因为两块内存区别不同，所以堆内的对象地址 和 常量池中对象地址是不相等的\")]),t._v(\" \"),a(\"p\",[t._v(\"当使用 \"),a(\"code\",[t._v(\"intern\")]),t._v(\" 方法时：\")]),t._v(\" \"),a(\"p\",[t._v(\"​\\t\\t如果存在： 则直接返回常量池的对象地址\")]),t._v(\" \"),a(\"p\",[t._v(\"​\\t\\t如果不存在：则会将堆内的字符串对象 复制一份 到常量池中，返回的是常量池中的对象地址\")]),t._v(\" \"),a(\"p\",[t._v(\"JDK7 /JK8：\")]),t._v(\" \"),a(\"p\",[t._v(\"从 JDK7 之后  字符串常量池已经被移到了堆当中了\")]),t._v(\" \"),a(\"p\",[t._v(\"当使用 \"),a(\"code\",[t._v(\"intern\")]),t._v(\" 方法时：\")]),t._v(\" \"),a(\"p\",[t._v(\"​\\t\\t如果存在： 则直接返回常量池的对象地址\")]),t._v(\" \"),a(\"p\",[t._v(\"​\\t\\t如果不存在：则会将堆内的字符串对象的引用地址 复制一份 到常量池中，返回的是常量池中的引用地址\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"string-有没有长度限制\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#string-有没有长度限制\"}},[t._v(\"#\")]),t._v(\" String 有没有长度限制\")]),t._v(\" \"),a(\"p\",[t._v(\"字符串是有有长度限\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"在编译期: 要求字符串常量池中的常量不能超过65535并且在javac执行过程中控制了最大值为65534。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"即 通过\"),a(\"code\",[t._v(\"使用String s= “”;\")]),t._v(\" 会有长度限制\")]),t._v(\" \"),a(\"li\",[t._v(\"在定义常量时，编译成源码时，会将字符串 长度设置为 \"),a(\"code\",[t._v(\"u2 length\")])]),t._v(\" \"),a(\"li\",[t._v(\"u2表示两个字节的无符号数，那么1个字节有8位，2个字节就有16位。\")]),t._v(\" \"),a(\"li\",[t._v(\"16位无符号数可表示的最大值位2^16 - 1 = 65535\")]),t._v(\" \"),a(\"li\",[t._v(\"实际定义要小于 65535 即 最大值为 65534\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"在运行期，长度不能超过Int的范围，否则会抛异常\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"即 通过\"),a(\"code\",[t._v(\"使用new String();\")]),t._v(\" 会有该限制\")]),t._v(\" \"),a(\"li\",[t._v(\"通过 \"),a(\"code\",[t._v(\"new String()\")]),t._v(\" 源码 得到 长度定义为 int  所有不得超过 int的范围\")])])])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"字符串常量池\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#字符串常量池\"}},[t._v(\"#\")]),t._v(\" 字符串常量池\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"为什么会有字符串常量池:\")]),t._v(\" \"),a(\"p\",[t._v(\"字符串的分配，和其他的对象分配一样，耗费高昂的时间与空间代价，作为最基础的数据类型，大量频繁的创建字符串，极大程度地影响程序的性能.\")]),t._v(\" \"),a(\"p\",[t._v(\"JVM为了提高性能和减少内存开销\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"字符串常量池的作用\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#字符串常量池的作用\"}},[t._v(\"#\")]),t._v(\" 字符串常量池的作用\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"为字符串开辟一个字符串常量池，类似于缓存区\")]),t._v(\" \"),a(\"li\",[t._v(\"创建字符串常量时，首先坚持字符串常量池是否存在该字符串\")]),t._v(\" \"),a(\"li\",[t._v(\"存在该字符串，返回引用实例，不存在，实例化该字符串并放入池中\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"字符串常量池存在什么地方：\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#字符串常量池存在什么地方：\"}},[t._v(\"#\")]),t._v(\" 字符串常量池存在什么地方：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"JDK6:  \"),a(\"code\",[t._v(\"永久代\")]),t._v(\" 因此大小受到永久代的限制，默认1009大小，且不可更改，容易出现溢出问题\")]),t._v(\" \"),a(\"li\",[t._v(\"JDK7:  转移到 \"),a(\"code\",[t._v(\"堆内存\")]),t._v(\" 中 默认大小为60013， 此时可以通过\"),a(\"code\",[t._v(\"-XX:StringTableSize\")]),t._v(\"参数进行控制大小\")]),t._v(\" \"),a(\"li\",[t._v(\"JDk8:   转移到 \"),a(\"code\",[t._v(\"元空间\")]),t._v(\" 中 ，直接使用的是本地内存\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"相关好文：\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://blog.csdn.net/tyyking/article/details/82496901\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"几张图轻松理解String.intern()\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"深入解析String#intern\"),a(\"OutboundLink\")],1)])])}),[],!1,null,null,null);s.default=r.exports}}]);","extractedComments":[]}